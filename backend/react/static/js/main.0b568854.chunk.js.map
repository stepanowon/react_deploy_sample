{"version":3,"sources":["components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","JSON","parse","localStorage","getItem","setState","history","push","i","splice","setItem","stringify","_this2","box","width","react_default","a","createElement","className","style","map","todo","key","onClick","deleteTodo","bind","addTodo","Component","TodoForm","newTodo","evt","target","value","onChange","changeHandler","react_router_dom","to","App","basename","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b568854.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: []\n        }\n    }\n\n    componentDidMount(){\n        let todos = JSON.parse(localStorage.getItem('todos')) || [];\n        this.setState({todos: todos})\n    }\n\n    addTodo(){\n        this.props.history.push('/todos/add')\n    }\n\n    deleteTodo(i){\n        let todos = this.state.todos;\n        todos.splice(i, 1);\n        this.setState({todos: todos});\n        localStorage.setItem('todos', JSON.stringify(this.state.todos))\n    }\n\n    \n\n    render() {\n        let box = {width: '100px'}\n\n        return (\n            <div className=\"card-body\">\n                <h5>Todo List</h5>\n                <table className='table'>\n                    <thead>\n                        <tr>\n                            <td style={box}>No</td>\n                            <td>Todo</td>\n                            <td style={box}>DEL</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.state.todos.map((todo, i) => {\n                            return (\n                                <tr key={i}>\n                                    <td>{i + 1}</td>\n                                    <td>{todo}</td>\n                                    <td><button className=\"btn btn-sm btn-danger\" onClick={this.deleteTodo.bind(this, i)}>DEL</button></td>\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n\n                <button className=\"btn btn-primary\" onClick={this.addTodo.bind(this)}>ADD</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link } from \"react-router-dom\";\n\nexport default class TodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newTodo: ''\n        }\n    }\n\n    changeHandler(evt) {\n        this.setState({ newTodo: evt.target.value })\n    }\n\n    addTodo() {\n        if (this.state.newTodo === '') return;\n        let todos = JSON.parse(localStorage.getItem('todos')) || [];\n        todos.push(this.state.newTodo);\n\n        localStorage.setItem('todos', JSON.stringify(todos));\n        this.setState({ newTodo: '' });\n\n        this.props.history.push(\"/\")\n    }\n\n    render() {\n        return (\n            <div className=\"card-body\">\n                <h5>Add Todo</h5>\n\n                <div className=\"input-group\">\n                    <input className=\"form-control\" onChange={this.changeHandler.bind(this)} />\n                    <div className=\"input-group-append\">\n                        <button className=\"btn btn-primary\" onClick={this.addTodo.bind(this)}>ADD</button>\n                    </div>\n                </div>\n                <br />\n\n                <Link to=\"/\">BACK</Link>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport TodoList from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nexport default class App extends Component {\n  render() {\n\n    //const baseUrl = \"http://java13716.cafe24.com/react/\";\n\n    return (\n      <div className=\"card-body\">\n        <h3>My Todo</h3>\n        <Router basename=\"/react\">\n          <Switch>\n            <Route path=\"/\" component={TodoList} exact={true} />\n            <Route path=\"/todos/add\" component={TodoForm} />\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.unregister();"],"sourceRoot":""}